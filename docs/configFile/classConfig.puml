@startuml
class Config{

	- std::map<std::pair<uint32_t, uint16_t>, std::map<std::string, VirtualServer> > **_virtualServers**;
	    - std::map<std::pair<uint32_t, uint16_t>, VirtualServer*> **_defaultVirtualServers**;
    - std::stringstream _sFile;
    - std::vector<std::string> _serversBlock;

    Logger _logger;

    bool _hasHost;
    bool _hasPort;

	
	+ Config(const std::string& configFile);

    + void loadFile(const std::string& configFile);
    + void removeComments(void);
    + void extractServerBlocks(void);
    + void createVirtualServers(void);
    + void fillVirtualServer(std::string& serverBlock, VirtualServer& VirtualServer);
    + void fillLocation(std::stringstream& ss, Location& location);
    + void validateVirtualServer(VirtualServer& VirtualServer);

    + std::map<std::pair<uint32_t, uint16_t>, VirtualServer*> **getDefaultsVirtualServers**(void);
    + std::map<std::pair<uint32_t, uint16_t>, std::map<std::string, VirtualServer> > **getVirtualServers(void)**;	
}

class VirtualServer{
    - uint32_t **_host**;
    - uint16_t **_port**;
    - std::string _serverName;
    - std::map<std::string, std::string> _errorsPage;
    - int _clientMaxBodySize;

    - std::set<std::string> _refAllowedErrorCode;
    - std::set<std::string> _refAllowedServerDirective;

    - uint32_t ipStringToNetOrder(std::string& ip);
    - Logger _logger;

    + VirtualServer();

    + void setDefaultsErrorsPage();
    + void setDefault();
    + void setErrorsPage(std::stringstream& serverBlock);
    + void setHost(std::string& directiveValue);
    + void setPort(std::string& directiveValue);
    + void setServerName(std::string& directiveValue);
    + void setBodySize(std::string& directiveValue);
    + void setLocation(std::pair<std::string, Location>& location);

    + std::string getServerName(void) const;
	+ std::string getErrorPage(std::string errorCode) const;
    + uint32_t getHost(void) const;
    + uint16_t getPort(void) const;
    + int getBodySize(void) const;
    + Location* getLocation(std::string resource);

    + void validateErrorCode(std::string& code);
    + void validateDirective(const std::string& directive);
    + void initReferences();
}

class Location {
    - std::string _resource;
    - std::set<std::string> _allowedMethods;
    - std::string **_root**;
    - std::string _index;
    - bool _autoIndex;
    - std::string _redirect;
    - bool _cgi;

    - std::set<std::string> _refAllowedLocationDirective;
    - std::set<std::string> _refAllowedMethods;

    - Logger _logger;

    + Location(void);

    + void setResource(std::string& path);
    + void setAllowedMethods(std::stringstream& method);
    + void setRoot(std::string& path);
    + void setAutoIndex(bool value);
    + void setIndex(std::string& file);
    + void setRedirect(std::string& path);
    + void setCGI(bool value);

    + std::string getResource(void) const;
    + std::string getRoot(void) const;
    + std::string getRedirect(void) const;
    + std::string getAllowedMethods(void) const;
    + std::string getIndex(void) const;

    + bool isCGI(void) const;
    + bool isAllowedMethod(const std::string& method);
    + bool isAutoIndex(void) const;

    + void initReferences();
    + void validateDirective(const std::string& directive);
    + void validateMethod(const std::string& method);
}

Config "1" *-- "many" VirtualServer
VirtualServer "1" *-- "many" Location

@enduml