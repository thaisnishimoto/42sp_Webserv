@startuml

Title WebServ - Classes Overview

WebServer *-- VirtualServer
WebServer *-- Request
WebServer *-- Response

class WebServer
{
	-int _epollFd;

	-std::set<uint16_t> _ports;
	-std::map<int, uint16_t> _socketsToPorts;

	-vector<VirtualServer> _virtualServers;

	-std::map<int, std::string> _connectionBuffers;
	-std::map<int, Request> _requestMap;
	-std::map<int, Response> _responseMap;

	-std::map<int, VirtualServer&> _targetVirtualServers;

	--

	+Webserver(void);
	+\~Webserver(void);
	+void init(void);
	+void run(void);

	+void setUpSockets(std::set<uint16_t> ports);
	+void bindSocket(void);
	+void startListening(void);

	+void addSocketsToEpoll(void);
	+void modifyEventInterest(int epollFd, int eventFd, uint32_t event);

	+int acceptConnection(int epollFd, int eventFd);
	+void setNonBlocking(int fd);

	+void initialParsing(int connectionFd, std::string& connectionBuffer, Request& request);
	+void parseRequestLine(std::string& connectionBuffer, Request& request);
	+void parseMethod(std::string& requestLine, Request& request);
	+void parseTarget(std::string& requestLine, Request& request);
	+void parseVersion(std::string& requestLine, Request& request);

	+void parseHeader(std::string& connectionBuffer, Request& request);
	+std::string captureFieldName(std::string& fieldLine);
	+std::string captureFieldValues(std::string& fieldLine);
	+void validateHeader(Request& request);

	+void fillResponse(Response& response, Request& request);

	+int consumeNetworkBuffer(int connectionFd, std::string& connectionBuffer);
}

note "Possibly could be static function" as N1
N1  .. WebServer::parseMethod
N1  .. WebServer::parseTarget
N1  .. WebServer::parseVersion

class VirtualServer
{
	+uint16_t port;
	+std::string name;

	+VirtualServer(int port, std::string name);
	+\~VirtualServer(void);
}

class	Request
{
	+std::string method;
	+std::string target;
	+std::map<std::string, std::string> headerFields;
	+std::string body;

	+bool parsedMethod;
	+bool parsedRequestLine;
	+bool parsedHeader;
	+bool parsedBody;

	+bool badRequest;

	+bool continueParsing;

	+Request(void);
}

class	Response
{
	+std::string _statusLine;
	+std::map<std::string, std::string> _headerFields;
	+std::string _body;

	+std::string _status;
	+std::string _reasonPhrase;
}

package "namespace Utils"
{
	object functions{
		str::string& trim(std::string& str);
		std::string getNextLineRN(std::string& buffer);
		std::string removeCRLF(std::string& fieldValue);
		void tolower(std::string &str);
	}
}

@enduml
